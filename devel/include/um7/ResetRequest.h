// Generated by gencpp from file um7/ResetRequest.msg
// DO NOT EDIT!


#ifndef UM7_MESSAGE_RESETREQUEST_H
#define UM7_MESSAGE_RESETREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace um7
{
template <class ContainerAllocator>
struct ResetRequest_
{
  typedef ResetRequest_<ContainerAllocator> Type;

  ResetRequest_()
    : zero_gyros(false)
    , reset_ekf(false)
    , set_mag_ref(false)  {
    }
  ResetRequest_(const ContainerAllocator& _alloc)
    : zero_gyros(false)
    , reset_ekf(false)
    , set_mag_ref(false)  {
  (void)_alloc;
    }



   typedef uint8_t _zero_gyros_type;
  _zero_gyros_type zero_gyros;

   typedef uint8_t _reset_ekf_type;
  _reset_ekf_type reset_ekf;

   typedef uint8_t _set_mag_ref_type;
  _set_mag_ref_type set_mag_ref;





  typedef boost::shared_ptr< ::um7::ResetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::um7::ResetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetRequest_

typedef ::um7::ResetRequest_<std::allocator<void> > ResetRequest;

typedef boost::shared_ptr< ::um7::ResetRequest > ResetRequestPtr;
typedef boost::shared_ptr< ::um7::ResetRequest const> ResetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::um7::ResetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::um7::ResetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::um7::ResetRequest_<ContainerAllocator1> & lhs, const ::um7::ResetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.zero_gyros == rhs.zero_gyros &&
    lhs.reset_ekf == rhs.reset_ekf &&
    lhs.set_mag_ref == rhs.set_mag_ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::um7::ResetRequest_<ContainerAllocator1> & lhs, const ::um7::ResetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace um7

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::um7::ResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::um7::ResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::um7::ResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::um7::ResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::um7::ResetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::um7::ResetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::um7::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "626ea3efbc6874926126840202a803dd";
  }

  static const char* value(const ::um7::ResetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x626ea3efbc687492ULL;
  static const uint64_t static_value2 = 0x6126840202a803ddULL;
};

template<class ContainerAllocator>
struct DataType< ::um7::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "um7/ResetRequest";
  }

  static const char* value(const ::um7::ResetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::um7::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool zero_gyros\n"
"bool reset_ekf\n"
"bool set_mag_ref\n"
;
  }

  static const char* value(const ::um7::ResetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::um7::ResetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.zero_gyros);
      stream.next(m.reset_ekf);
      stream.next(m.set_mag_ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::um7::ResetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::um7::ResetRequest_<ContainerAllocator>& v)
  {
    s << indent << "zero_gyros: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zero_gyros);
    s << indent << "reset_ekf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_ekf);
    s << indent << "set_mag_ref: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_mag_ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UM7_MESSAGE_RESETREQUEST_H
